# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10mtdGcCafEiftsVhU_ml7eJTO4JjcnsH
"""

import pandas as pd
import numpy as np
import difflib # if user gave any movie name , we figure out the closet match
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity # similarities between input and data what we have.

data = pd.read_csv('/content/movies.csv', engine='python', on_bad_lines='skip')
data.head(2)

data.shape

# selecting relevent features for recommendation

selected_features = ["genres","keywords","tagline","cast","director"]

# filling null values with a null string

for feature in selected_features:
  data[feature] = data[feature].fillna('')

# combining all the 5 selected features

combined_features = data['genres'] + data['keywords'] + data['tagline'] + data['cast'] + data['director']

print(combined_features.head())

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

# to find similarity score

similarity = cosine_similarity(feature_vectors)

print(similarity)

similarity.shape

movie_name = input("Enter your fav movie name : ")

# creating a list of all the movie names given in the list

movie_list = data['title'].tolist()
print(movie_list)

# finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, movie_list)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title
index = data[data['title'] == close_match]['index'].values[0]
print(index)

# getting list of similar movies based on index value

similarity_score = list(enumerate(similarity[index]))
print(similarity_score)

len(similarity_score)

# sorting the movie with highest similarity

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

# sorting out the top movies based on similarity based on index.
print("Movies suggested for you : \n")

i = 1
for movie_list in sorted_similar_movies:
  index = movie_list[0]
  title_from_index = data[data.index == index]['title'].values[0]
  if i<=15:
    print(i, '\t', title_from_index)
    i = i+1

"""MOVIE RECOMMENDATION SYSTEM"""

movie_name = input("Enter your fav movie name : ")
movie_list = data['title'].tolist()
find_close_match = difflib.get_close_matches(movie_name, movie_list)
close_match = find_close_match[0]
index = data[data['title'] == close_match]['index'].values[0]
similarity_score = list(enumerate(similarity[index]))
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print("Movies suggested for you : \n")

i = 1
for movie_list in sorted_similar_movies:
  index = movie_list[0]
  title_from_index = data[data.index == index]['title'].values[0]
  #link = data[data.index == index]['homepage'].values[0]
  if i<=15:
    print(i, '\t', title_from_index)
    #if link != np.nan :
      #print("\t link to watch : ", link)
    i = i+1

import pickle

filepath = "movie_recommendation.sav"
pickle.dump(similarity, open(filepath, 'wb'))

